buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    id "java-library"
    id "maven-publish"
    id 'signing'
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "net.ltgt.apt-eclipse"
    id "net.ltgt.apt-idea"
    id "net.ltgt.apt"
    id "org.sonarqube"
    id "io.spring.nohttp"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

apply plugin: 'io.spring.dependency-management'

group 'com.winged-tech'
version project_version

ext {
    artifactId = 'wingedcare-common-mongo'
}

sourceCompatibility=1.8
targetCompatibility=1.8
assert System.properties["java.specification.version"] == "1.8" || "11" || "12" || "13" || "14"

jar.enabled(true)

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/spring' }
    mavenCentral()
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// javadoc，如果用jdk11，默认就支持中文
// 查看可以配置的属性：https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
tasks.withType(Javadoc) {
    options.version = true
    options.author = true
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"  //解决中文乱码
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}
task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion '${checkstyle_version}'
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

dependencies {
    // import JHipster dependencies BOM
    implementation ("com.winged-tech:wingedcare-common:${winged_common_version}") {
        exclude group: "org.springframework.cloud", module: "spring-cloud-starter-kubernetes"
        exclude group: "org.springframework.cloud", module: "spring-cloud-starter-kubernetes-config"
        exclude group: "org.springframework.cloud", module: "spring-cloud-starter-kubernetes-ribbon"
    }
    api "com.github.dalet-oss:mongobee:1.0.4"
    api "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.retry:spring-retry"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.7.0"
    testImplementation "junit:junit"
    testImplementation "org.springframework.cloud:spring-cloud-stream"
    testImplementation "org.springframework.cloud:spring-cloud-stream-test-support"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_version}"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo"
}

wrapper {
    gradleVersion = "6.5"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId artifactId
            version version
            artifact sourcesJar
            artifact javadocJar
            from components.java

            pom {
                name = 'wingedcare common'
                description = 'common for Java'
                url = 'https://github.com/Winged-Tech/wingedcare-common'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://www.opensource.org/licenses/mit-license.php'
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = 'wingedtech'
                        name = 'wingedtech'
                        email = 'release@winged-tech.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/Winged-Tech/wingedcare-common.git'
                    developerConnection = "scm:git:https://github.com/Winged-Tech/wingedcare-common.git"
                    url = 'https://github.com/Winged-Tech/wingedcare-common'
                }
            }
        }
    }

    repositories {
        // Publish package to the Maven Central Repository
        maven {
            name "OSSRH"
            credentials {
                username System.getenv("MAVEN_USERNAME")
                password System.getenv("MAVEN_PASSWORD")
            }
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

// 签名，发布时会先执行签名
// 参考：https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    // 不想对非发布版的工件进行签名
    required { isReleaseVersion }
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

compileJava.dependsOn processResources
